apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ printf "%s-lndinit" (include "lnd.fullname" .) }}
  labels:
    {{- include "lnd.labels" . | nindent 4 }}
data:
  init-wallet-k8s.sh: |
    #!/bin/bash
    
    set -e
    
    GEN_SEED=${GEN_SEED:-0}
    WALLET_SECRET_NAME=${WALLET_SECRET_NAME:-lnd-wallet-secret}
    WALLET_SECRET_NAMESPACE=${WALLET_SECRET_NAMESPACE:-default}
    WALLET_DIR=${WALLET_DIR:-~/.lnd/data/chain/bitcoin/mainnet}
    WALLET_PASSWORD_FILE=${WALLET_PASSWORD_FILE:-/tmp/wallet-password}
    CERT_DIR=${CERT_DIR:-~/.lnd}
    UPLOAD_RPC_SECRETS=${UPLOAD_RPC_SECRETS:-0}
    UPLOAD_PUBKEY_SECRETS=${UPLOAD_PUBKEY_SECRETS:-0}
    RPC_SECRETS_NAME=${RPC_SECRETS_NAME:-lnd-rpc-secret}
    RPC_SECRETS_NAMESPACE=${RPC_SECRETS_NAMESPACE:-default}
    PUBKEY_SECRETS_NAME=${PUBKEY_SECRETS_NAME:-lnd-pubkey}
    PUBKEY_SECRETS_NAMESPACE=${PUBKEY_SECRETS_NAMESPACE:-default}
    NETWORK=${NETWORK:-mainnet}
    RPC_SERVER=${RPC_SERVER:-localhost:10009}
    
    echo "[STARTUP] Asserting wallet password exists in secret ${WALLET_SECRET_NAME}"
    lndinit gen-password \
      | lndinit -v store-secret \
      --target=k8s \
      --k8s.namespace="${WALLET_SECRET_NAMESPACE}" \
      --k8s.secret-name="${WALLET_SECRET_NAME}" \
      --k8s.secret-key-name=password
    
    if [[ "${GEN_SEED}" == "1" ]]; then
    echo ""
    echo "[STARTUP] Asserting seed exists in secret ${WALLET_SECRET_NAME}"
    lndinit gen-seed \
      | lndinit -v store-secret \
      --target=k8s \
      --k8s.namespace="${WALLET_SECRET_NAMESPACE}" \
      --k8s.secret-name="${WALLET_SECRET_NAME}" \
      --k8s.secret-key-name=walletseed
    
    echo ""
    echo "[STARTUP] Asserting wallet is created with values from secret ${WALLET_SECRET_NAME}"
    lndinit -v init-wallet \
      --secret-source=k8s \
      --k8s.namespace="${WALLET_SECRET_NAMESPACE}" \
      --k8s.secret-name="${WALLET_SECRET_NAME}" \
      --k8s.seed-key-name=walletseed \
      --k8s.wallet-password-key-name=password \
      --init-file.output-wallet-dir="${WALLET_DIR}" \
      --init-file.validate-password
    fi
    
    echo ""
    echo "[STARTUP] Preparing lnd auto unlock file"
    
    # To make sure the password can be read exactly once (by lnd itself), we create
    # a named pipe. Because we can only write to such a pipe if there's a reader on
    # the other end, we need to run this in a sub process in the background.
    mkfifo "${WALLET_PASSWORD_FILE}"
    lndinit -v load-secret \
      --source=k8s \
      --k8s.namespace="${WALLET_SECRET_NAMESPACE}" \
      --k8s.secret-name="${WALLET_SECRET_NAME}" \
      --k8s.secret-key-name=password > "${WALLET_PASSWORD_FILE}" &
    
    # In case we want to upload the TLS certificate and macaroons to k8s secrets as
    # well once lnd is ready, we can use the wait-ready and store-secret commands in
    # combination to wait until lnd is ready and then batch upload the files to k8s.
    if [[ "${UPLOAD_RPC_SECRETS}" == "1" ]]; then
      echo ""
      echo "[STARTUP] Starting RPC secret uploader process in background"
      lndinit -v wait-ready \
    && lndinit -v store-secret \
    --batch \
    --overwrite \
    --target=k8s \
    --k8s.namespace="${RPC_SECRETS_NAMESPACE}" \
    --k8s.secret-name="${RPC_SECRETS_NAME}" \
    "${CERT_DIR}/tls.cert" \
    "${WALLET_DIR}"/*.macaroon \
    && cp "${WALLET_DIR}"/admin.macaroon /tmp/ \
    && mv /tmp/admin.macaroon /tmp/admin_macaroon_base64 \
    && cp "${CERT_DIR}/tls.cert" /tmp/ \
    && mv /tmp/tls.cert /tmp/tls_base64 \
    && lndinit -v store-secret \
    --batch \
    --overwrite \
    --target=k8s \
    --k8s.base64 \
    --k8s.namespace="${RPC_SECRETS_NAMESPACE}" \
    --k8s.secret-name="${RPC_SECRETS_NAME}" \
    /tmp/tls_base64 \
    /tmp/admin_macaroon_base64 &
    fi
    
    if [[ "${UPLOAD_PUBKEY_SECRETS}" == "1" ]]; then
      echo ""
      echo "[STARTUP] Starting PUBKEY secret uploader process in background"
      lndinit -v wait-ready \
    && lncli --network "${NETWORK}" --rpcserver "${RPC_SERVER}" \
    --tlscertpath "${CERT_DIR}/tls.cert" \
    getinfo | jq -r .identity_pubkey \
    | lndinit -v store-secret \
    --overwrite \
    --target=k8s \
    --k8s.namespace="${PUBKEY_SECRETS_NAMESPACE}" \
    --k8s.secret-name="${PUBKEY_SECRETS_NAME}" \
    --k8s.secret-key-name=pubkey &
    fi
    
    # And finally start lnd. We need to use "exec" here to make sure all signals are
    # forwarded correctly.
    echo ""
    echo "[STARTUP] Starting lnd with flags: $@"
    exec lnd "$@"